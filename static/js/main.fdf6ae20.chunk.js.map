{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleInput","sortBy","handleInputChange","event","setState","target","value","toLowerCase","handleSelectedChange","getSortedBySelected","todos","filter","todo","completed","getSearchTodos","title","includes","this","props","onCheckted","selectedUserId","todosByStatus","todosByInput","className","type","name","id","placeholder","onChange","map","classNames","readOnly","userId","onClick","React","Component","API_URL","getTodos","a","fetch","then","result","json","getUser","CurrentUser","user","userError","loadUser","prevProps","email","phone","onClear","App","checkedUser","unselectAll","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdf6ae20.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  onCheckted: (userId: number) => void,\n  selectedUserId: number,\n};\n\ntype State = {\n  titleInput: string,\n  sortBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    titleInput: '',\n    sortBy: 'all',\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      titleInput: event.target.value.toLowerCase(),\n    });\n  };\n\n  handleSelectedChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      sortBy: event.target.value,\n    });\n  };\n\n  getSortedBySelected = (todos: Todo[]) => {\n    switch (this.state.sortBy) {\n      case 'ready':\n        return todos.filter(todo => todo.completed);\n\n      case 'notReady':\n        return todos.filter(todo => !todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  getSearchTodos = (todos: Todo[]) => {\n    const { titleInput } = this.state;\n\n    if (titleInput) {\n      return todos.filter(todo => todo.title.toLowerCase().includes(titleInput));\n    }\n\n    return todos;\n  };\n\n  render() {\n    const { todos, onCheckted, selectedUserId } = this.props;\n    const todosByStatus = this.getSortedBySelected(todos);\n    const todosByInput = this.getSearchTodos(todosByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          name=\"sortByText\"\n          id=\"sortByText\"\n          placeholder=\"Search todo\"\n          value={this.state.titleInput}\n          onChange={this.handleInputChange}\n        />\n\n        <select\n          name=\"sortBySelect\"\n          id=\"sortBySelect\"\n          value={this.state.sortBy}\n          onChange={this.handleSelectedChange}\n        >\n          <option value=\"all\">\n            Show all\n          </option>\n          <option value=\"ready\">\n            Show complited\n          </option>\n          <option value=\"notReady\">\n            Show not complited\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosByInput.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed })}\n              >\n                <>{ /* eslint-disable-next-line jsx-a11y/label-has-associated-control */}</>\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button',\n                    { 'TodoList__user-button--selected ': todo.userId === selectedUserId })}\n                  type=\"button\"\n                  onClick={() => onCheckted(todo.userId)}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(result => result.json());\n};\n\nexport const getUser = (userId: number) => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(result => result.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  onClear: () => void,\n};\n\ntype State = {\n  user: User | null,\n  userError: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {} as User,\n    userError: false,\n  };\n\n  async componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    try {\n      const user = await getUser(this.props.userId);\n\n      this.setState({\n        user,\n        userError: false,\n      });\n    } catch {\n      this.setState({\n        userError: true,\n      });\n    }\n  };\n\n  render() {\n    return (\n      !this.state.userError ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {this.state.user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {this.state.user.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {this.state.user.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {this.state.user.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              this.props.onClear();\n            }}\n          >\n            Clear user\n          </button>\n        </div>\n      )\n        : (\n          `User id #${this.props.userId} not found`\n        )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  checkedUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  unselectAll = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            onCheckted={this.checkedUser}\n            selectedUserId={this.state.selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={this.state.selectedUserId}\n                onClear={this.unselectAll}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}